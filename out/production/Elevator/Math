import User
import Elevator

User user = new User()
user.currentFloor = 6
user.desiredFloor = 4

if (user.currentFloor < user.desiredFloor) {
    user.desiredDirection = true //up
} else {
    user.desiredDirection = false //down
}

int numOfStops = 2
Elevator elevator = new Elevator(numOfStops)
elevator.currentDirection = false
elevator.currentFloor = 4
elevator.stop = [3,1]

println("${getElevatorTime(user, elevator, numOfStops).trunc(2)}")

Double getElevatorTime(User user, Elevator elevator, Integer numOfStops) {
    Double distanceBeforePickup
    Double time

    if (numOfStops == 0) {
        distanceBeforePickup = (elevator.currentFloor - user.currentFloor).abs()
    } else {
        def highest = getFurthestFloor(user, elevator)
        distanceBeforePickup = 2 * (highest - elevator.currentFloor).abs() + (elevator.currentFloor - user.currentFloor).abs()
    }
    Double distanceAfterPickup = ((user.desiredFloor - user.currentFloor).abs())
    time = (distanceBeforePickup * elevator.TRAVEL_TIME_PER_FLOOR) + (numOfStops * elevator.STOP_TIME_PER_FLOOR) + (distanceAfterPickup * elevator.TRAVEL_TIME_PER_FLOOR) + (elevator.STOP_TIME_PER_FLOOR/2)
}

Integer getFurthestFloor(User user, Elevator elevator) {
     def a = elevator.stop[0]
     for (int i = 0; i < elevator.stop.size(); i++) {
         if (elevator.currentDirection == true && elevator.stop[i] > a)
             a = elevator.stop[i]
         else if (elevator.currentDirection == false && elevator.stop[i] < a)
             a = elevator.stop[i]
     }
    return a
 }

